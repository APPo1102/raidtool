<!DOCTYPE html>
<html lang="zh-Hant">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>挑戰(雙隊)模式輔助工具 — 原型</title>
  <style>
    :root{--gap:12px;--card-bg:#fafafa;--accent:#2b6cb0}
    body{font-family:system-ui,-apple-system,Segoe UI, Roboto, "Noto Sans TC", sans-serif;margin:20px;color:#111}
    h1{margin:0 0 12px}
    .tabs{display:flex;gap:8px;margin-bottom:18px}
    .tab{padding:8px 14px;border-radius:8px;background:#eee;cursor:pointer}
    .tab.active{background:var(--accent);color:white}
    .tab-content{display:none}
    .tab-content.active{display:block}
    .layout{display:flex;gap:var(--gap)}
    .left, .right{background:var(--card-bg);padding:12px;border-radius:10px;box-shadow:0 1px 3px rgba(0,0,0,0.06)}
    .left{flex:1;min-width:420px}
    .right{width:380px}
    .team{border:1px solid #e6e6e6;border-radius:8px;padding:8px;margin-bottom:10px}
    .team h3{margin:4px 0}
    select, input[type=number]{width:100%;box-sizing:border-box;padding:6px;border-radius:6px;border:1px solid #ddd}
    .row9-grid{display:grid;grid-template-columns:repeat(2,1fr);gap:8px}
    .option-item{display:flex;gap:8px;align-items:center;padding:6px;border-radius:6px;background:white;border:1px solid #eee}
    .small{font-size:13px;color:#555}
    .results{background:white;padding:10px;border-radius:8px;border:1px solid #eee}
    pre{white-space:pre-wrap;word-wrap:break-word}
    label.switch{display:flex;align-items:center;gap:8px}
    .mapping{margin-top:8px}
    .footer{margin-top:16px;color:#666;font-size:13px}
  </style>
</head>
<body>
  <h1>挑戰(雙隊)模式輔助工具 — 可調式原型</h1>

  <div class="tabs">
    <div class="tab active" data-tab="challenge">挑戰(雙隊)模式</div>
    <div class="tab" data-tab="coeff">係數調整 & 對應設定</div>
  </div>

  <div id="challenge" class="tab-content active">
    <div class="layout">
      <div class="left">
        <div class="team">
          <h3>第 1 隊（4 人）</h3>
          <div id="team1Slots"></div>
        </div>
        <div class="team">
          <h3>第 2 隊（4 人）</h3>
          <div id="team2Slots"></div>
        </div>

        <div style="margin-top:8px">
          <h4>第9列增益選項（可逐項設定）</h4>
          <div id="row9Controls" class="row9-grid"></div>
          <div class="small">說明：數字型項目會顯示為百分比或數值輸入；非數字則顯示為開關。</div>
        </div>

      </div>

      <div class="right">
        <div class="results">
          <h3>即時計算結果</h3>
          <div style="display:flex;gap:8px;margin-bottom:8px">
            <div style="flex:1"><strong>隊伍1總合</strong><div id="team1Result">-</div></div>
            <div style="flex:1"><strong>隊伍2總合</strong><div id="team2Result">-</div></div>
          </div>
          <div><strong>全隊總合</strong><div id="totalResult">-</div></div>
          <hr>
          <div><strong>詳細數值（JSON）</strong><pre id="debugOutput">載入中...</pre></div>
        </div>

        <div style="margin-top:10px;background:#fff;padding:8px;border-radius:8px;border:1px solid #eee">
          <h4 class="small">計算模組控制</h4>
          <div class="mapping">
            <label class="small">預設計算方式：<select id="calcMode"><option value="sum">數值相加</option><option value="weighted">加權 (使用係數表)</option></select></label>
            <div class="small">提示：可在「係數調整」分頁調整欄位對應與係數，或選用簡單的數值相加。</div>
          </div>
        </div>
      </div>
    </div>
    <div class="footer">提示：此原型會讀取在同一目錄下的 <code>challenge.json</code> 與 <code>coefficients.json</code>。如需上傳新版本 JSON，請替換檔案後重新整理頁面。</div>
  </div>

  <div id="coeff" class="tab-content">
    <h2>係數調整與欄位對應</h2>
    <p class="small">此分頁會顯示從 CSV 轉出的 coefficients.json 內容，並提供欄位對應設置（將第9列選項對應到要影響的數值欄位）。</p>
    <div style="display:flex;gap:12px">
      <div style="flex:1">
        <h4>原始係數表（JSON）</h4>
        <pre id="coeffRaw">載入中...</pre>
      </div>
      <div style="width:360px">
        <h4>第9列 → 欄位對應</h4>
        <div id="mappingEditor">載入中...</div>
        <div class="small" style="margin-top:8px">使用映射可明確指定哪些第9列選項會影響哪個數值欄位（可複選），以及採用「乘法(mult)」或「加法(add)」類型。</div>
      </div>
    </div>
  </div>

  <script>
    // 頁籤切換
    document.querySelectorAll('.tab').forEach(t => t.addEventListener('click', () => {
      document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(c=>c.classList.remove('active'));
      t.classList.add('active');
      document.getElementById(t.dataset.tab).classList.add('active');
    }));

    // 全域資料容器
    let challengeData = null; // array of row objects
    let coeffData = null; // array of coeff objects
    let headers = null; // column headers from challenge.json
    let professionCol = null;
    let professionRows = {}; // name->rowObject

    async function fetchData(){
      const [cRes, kRes] = await Promise.all([
        fetch('challenge.json'),
        fetch('coefficients.json')
      ]);
      challengeData = await cRes.json();
      coeffData = await kRes.json();

      if(!Array.isArray(challengeData) || challengeData.length===0){
        alert('challenge.json 載入失敗或格式不正確');
        return;
      }

      headers = Object.keys(challengeData[0]);
      // 假設職業名稱在 C 欄 (第 3 欄)，如果有需要可在 mapping 編輯器更改
      professionCol = headers[1];

      // 建構職業 map（用 C21~C61）
      const start = 20; const end = 81; // slice indices (21~61 rows)
      const sliceRows = challengeData.slice(start, end);
      sliceRows.forEach(r => { const name = r[professionCol]; if(name) professionRows[name]=r; });

      renderTeamSelectors(Object.keys(professionRows));
      renderRow9Controls();
      renderCoeffTab();
      calculateAll();
    }

    function renderTeamSelectors(jobList){
      const t1 = document.getElementById('team1Slots');
      const t2 = document.getElementById('team2Slots');
      t1.innerHTML=''; t2.innerHTML='';
      for(let i=0;i<4;i++){
        t1.appendChild(memberSelect(i+1,1,jobList));
      }
      for(let i=0;i<4;i++){
        t2.appendChild(memberSelect(i+1,2,jobList));
      }
    }

    function memberSelect(slot, team, jobList){
      const wrap = document.createElement('div'); wrap.style.marginBottom='6px';
      const sel = document.createElement('select');
      sel.dataset.team=team; sel.dataset.slot=slot;
      jobList.forEach(j=>{const o=document.createElement('option'); o.value=j; o.textContent=j; sel.appendChild(o)});
      sel.addEventListener('change', calculateAll);
      wrap.appendChild(sel);
      return wrap;
    }

    // 解析第9列的項目（index 8）並動態產生控制項
    function renderRow9Controls(){
      const row9 = challengeData[8];
      const container = document.getElementById('row9Controls');
      container.innerHTML='';
      const keys = Object.keys(row9);
      keys.forEach(k=>{
        const raw = row9[k];
        const item = document.createElement('div'); item.className='option-item';
        const label = document.createElement('div'); label.style.flex='1'; label.innerHTML=`<div style="font-weight:600">${k}</div><div class="small">原始：${raw}</div>`;
        item.appendChild(label);
        // 判斷型別：數字 -> number input；否則 -> checkbox
        const num = parseFloat(String(raw).replace('%',''));
        if(!isNaN(num) && String(raw).trim()!==''){
          const inp = document.createElement('input'); inp.type='number'; inp.value=num; inp.min='0'; inp.style.width='96px';
          // 假設為百分比，顯示旁邊的 %
          const suf = document.createElement('div'); suf.innerText='%'; suf.style.marginLeft='6px';
          const box = document.createElement('div'); box.style.display='flex'; box.style.alignItems='center'; box.appendChild(inp); box.appendChild(suf);
          item.appendChild(box);
          inp.addEventListener('input', calculateAll);
          inp.dataset.key = k;
        } else {
          const chk = document.createElement('input'); chk.type='checkbox'; chk.checked = (String(raw).trim()!==''); chk.dataset.key = k;
          chk.addEventListener('change', calculateAll);
          item.appendChild(chk);
        }
        container.appendChild(item);
      });
    }

    // 係數分頁：顯示 raw JSON 並建立簡單 mapping editor
    function renderCoeffTab(){
      document.getElementById('coeffRaw').textContent = JSON.stringify(coeffData, null, 2);
      // mapping editor: 讓使用者針對每個 row9 欄位選擇對應影響欄位
      const row9 = challengeData[8];
      const keys = Object.keys(row9);
      const allStatHeaders = headers.slice(3); // 假設從第4欄開始為各種數值欄
      const editor = document.getElementById('mappingEditor'); editor.innerHTML='';
      keys.forEach(k=>{
        const block = document.createElement('div'); block.style.marginBottom='6px';
        const title = document.createElement('div'); title.textContent = k; title.style.fontWeight='600';
        block.appendChild(title);
        // create multi-select for affected fields
        const sel = document.createElement('select'); sel.multiple=true; sel.size=4; sel.style.width='100%';
        allStatHeaders.forEach(h=>{ const o=document.createElement('option'); o.value=h; o.textContent=h; sel.appendChild(o); });
        const mode = document.createElement('select'); ['mult','add'].forEach(m=>{const o=document.createElement('option');o.value=m;o.textContent=m;mode.appendChild(o)});
        mode.style.marginTop='6px'; mode.style.width='100%';
        block.appendChild(sel); block.appendChild(mode);
        editor.appendChild(block);
      });
      // note: these mappings are kept in-memory only for this prototype
    }

    // 讀取用戶在第9列設定的數值/開關
    function readRow9Settings(){
      const container = document.getElementById('row9Controls');
      const settings = {};
      container.querySelectorAll('.option-item').forEach(item=>{
        const key = item.querySelector('div').textContent; // first div contains name and original
        // find input or checkbox
        const inp = item.querySelector('input');
        if(!inp) return;
        if(inp.type==='number') settings[key] = parseFloat(inp.value)||0;
        else if(inp.type==='checkbox') settings[key] = inp.checked;
      });
      return settings;
    }

    // 計算邏輯（模組化）
    function calculateAll(){
      if(!challengeData) return;
      const mode = document.getElementById('calcMode').value;
      const team1 = Array.from(document.querySelectorAll('#team1Slots select')).map(s=>s.value);
      const team2 = Array.from(document.querySelectorAll('#team2Slots select')).map(s=>s.value);
      const row9Settings = readRow9Settings();

      const t1Stats = aggregateTeamStats(team1, row9Settings, mode);
      const t2Stats = aggregateTeamStats(team2, row9Settings, mode);

      const total = combineTeamStats(t1Stats, t2Stats);

      document.getElementById('team1Result').textContent = formatSummary(t1Stats);
      document.getElementById('team2Result').textContent = formatSummary(t2Stats);
      document.getElementById('totalResult').textContent = formatSummary(total);
      document.getElementById('debugOutput').textContent = JSON.stringify({team1:t1Stats,team2:t2Stats,total:total,row9:row9Settings}, null, 2);
    }

    // 將隊伍成員的數值欄位相加，並根據 row9 設定與係數表進行調整
    function aggregateTeamStats(memberNames, row9Settings, mode){
      const stats = {}; // key -> numeric
      memberNames.forEach(name=>{
        const row = professionRows[name];
        if(!row) return;
        Object.entries(row).forEach(([k,v])=>{
          // skip empty and non-numeric headers like name columns
          const num = parseFloat(String(v).replace('%',''));
          if(!isNaN(num)){
            stats[k] = (stats[k]||0) + num;
          }
        });
      });

      // apply row9Settings: for each option, consult mapping editor (if present) to see which stat fields to affect
      // For prototype: if option value is numeric -> apply as percent multiplier to ALL numeric stats
      // if option is boolean true -> apply +5% boost to ALL numeric stats (configurable later via mapping)
      Object.entries(row9Settings).forEach(([opt,val])=>{
        if(typeof val === 'number'){
          const pct = val/100;
          Object.keys(stats).forEach(k=>{ stats[k] = stats[k] * (1 + pct); });
        } else if(typeof val === 'boolean' && val===true){
          Object.keys(stats).forEach(k=>{ stats[k] = stats[k] * 1.05; });
        }
      });

      // optionally apply coefficients.json if mode === 'weighted'
      if(mode==='weighted' && Array.isArray(coeffData) && coeffData.length>0){
        // coeffData may contain rows like {欄位:..., 係數:...} — attempt to match header names
        coeffData.forEach(row=>{
          // try find a header-like key and numeric coefficient
          Object.entries(row).forEach(([ck,cv])=>{
            const num = parseFloat(String(cv));
            if(!isNaN(num) && headers.includes(ck)){
              // apply coefficient to that field
              if(stats[ck]!==undefined) stats[ck] = stats[ck] * num;
            }
          });
        });
      }

      // compute a simple total aggregate value
      const totalValue = Object.values(stats).reduce((s,n)=>s+n,0);
      return {fields:stats, total: totalValue};
    }

    function combineTeamStats(a,b){
      const res = {fields:{}, total:0};
      const keys = new Set([...Object.keys(a.fields), ...Object.keys(b.fields)]);
      keys.forEach(k=>{ res.fields[k] = (a.fields[k]||0) + (b.fields[k]||0); });
      res.total = a.total + b.total; return res;
    }

    function formatSummary(statObj){
      return `總分: ${statObj.total.toFixed(2)}`;
    }

    // initialize
    fetchData().then(()=>{
      // attach listeners to controls that affect calculation
      document.getElementById('calcMode').addEventListener('change', calculateAll);
      // trigger initial calculation
      calculateAll();
    }).catch(err=>{ console.error(err); alert('載入資料發生錯誤，請檢查 JSON 檔案是否存在於同一資料夾。'); });

  </script>
</body>
</html>